new_breed_entry = None
    breed_id = None
    breed_name = None 
    breed_temperament = None
    breed_origin = None
    breed_wikipedia_url = None
    breed_description = None
    breed_life_span = None
    #looping through each breed
    for breed in json_breed_data:
        value = None
        if key == 'weight':
            pass
        else:
            #assigning values to keys in order to create CatBreed object instance
            if key == 'id':
                breed_id = value
            elif key == 'name':
                breed_name = value                    
            elif key == 'temperament':
                breed_temperament = value
            elif key == 'origin':
                breed_origin = value
            elif key == 'wikipedia_url':
                breed_wikipedia_url = value
            elif key == 'description':
                breed_description = value
            elif key == 'life_span':
                breed_life_span = value

breed_data_url = url_template + "/breeds"
    #json_breed_data = requests.get(breed_data_url, headers=headers).json()

                -----


                for breed in json_breed_data:
                breed_id = request.args['id']
                breed_name = request.args['name']              
                breed_temperament = request.args['temperament'] 
                breed_origin = request.args['origin']
                breed_wikipedia_url = request.args['wikipedia_url']
                breed_description = request.args['description']
                breed_life_span = request.args['life_span']

----

# #populating database
#with app.app_context():
#with open('breeds.json', encoding='utf-8') as cat_breeds:
request = urllib.request.urlopen("https://api.thecatapi.com/v1/breeds?api_key=17816ca0-ede7-4033-a4cf-2dcf0b30a1f1")
content = request.read()
encoding = request.info().get_content_charset('utf-8')
cat_breeds =  json.loads(content.decode(encoding))
    #all_breeds = json.load(cat_breeds)
for breed in cat_breeds:
    breed_id = breed['id']
    breed_name = breed['name']
    breed_temperament = breed['temperament']
    breed_origin = breed['origin']
    breed_description = breed['description']
    breed_life_span = breed['life_span']
    new_breed_entry = CatBreed(id=breed_id, name=breed_name, temperament=breed_temperament, origin=breed_origin, description= breed_description, life_span =breed_life_span)
    db.session.add(new_breed_entry)
db.session.commit()



#populating cat breed database
def populating_images_db():
    request = urllib.request.urlopen("https://api.thecatapi.com/v1/images/search?category_ids=")
    content = request.read()
    encoding = request.info().get_content_charset('utf-8')
    cat_images =  json.loads(content.decode(encoding))
    categories= list(range(1,30))
    images_to_add = []
    for image in cat_images:
        img_id = image['id']
        img_url = image['url']
        #instantiating new breed instance
        new_img_entry = CatImage(id=img_id, url=img_url)
        images_to_add.append(new_img_entry)
    #adding all instances to datbaase
    db.session.add_all(images_to_add)
    db.session.commit()


class CatImage(db.Model):
    __tablename__ = 'cat_image'
    id = db.Column(db.String(50), primary_key=True)
    url = db.Column(db.String(200))
    #defining how CatBreed objs are going to be printed
    def _repr__(self):
        return '<CatImage {}>'.format(self.id, self.url)



def all_breeds():
    breeds = CatBreed.query.all()
    all_breeds = []
    for breed in breeds:
        cat_breed = {
            'id' : breed.id,
            'name' : breed.name,
            'temperament' : breed.temperament,
            'origin' : breed.origin,
            'description' : breed.description
        }
        all_breeds.append(cat_breed)
    return render_template('breeds_display.html', all_breeds=all_breeds), 201       
